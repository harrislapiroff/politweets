# Generated by Django 2.1.3 on 2018-11-09 19:58
import sys

from TwitterAPI import TwitterAPI

from django.conf import settings
from django.db import migrations, transaction

api = TwitterAPI(
    settings.TWITTER_CONSUMER_KEY,
    settings.TWITTER_CONSUMER_SECRET,
    settings.TWITTER_ACCESS_TOKEN,
    settings.TWITTER_ACCESS_TOKEN_SECRET,
)


def chunks(l, n):
    for i in range(0, len(l), n):
        yield l[i:i + n]


def forward(apps, schema_editor):
    "Delete all tweets that are retweets"
    Tweet = apps.get_model('politweets', 'Tweet')
    tweets = Tweet.objects\
                  .filter(original_data__text__isnull=False)

    # The API only allows us to query 100 tweets at a time
    tweet_chunks = chunks(tweets, 100)

    sys.stdout.write('\n')

    for n, chunk in enumerate(tweet_chunks):
        sys.stdout.write('- Updating chunk {}\n'.format(n))
        with transaction.atomic():
            params = {
                'id': ','.join([str(t.twitter_tweet_id) for t in chunk]),
                'tweet_mode': 'extended',
                'map': True,
            }

            res = api.request('statuses/lookup', params)

            for id, tweet in res.json()['id'].items():
                if tweet is None:
                    continue
                tweet_obj = Tweet.objects.get(twitter_tweet_id=id)
                tweet_obj.text = tweet['full_text']
                tweet_obj.original_data = tweet
                tweet_obj.save()


def reverse(apps, schema_editor):
    "There's no need to restore old-style tweets, so we don't bother"
    pass

class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('politweets', '0009_auto_20181106_1628'),
    ]

    operations = [
        migrations.RunPython(forward, reverse, elidable=True, atomic=False)
    ]
